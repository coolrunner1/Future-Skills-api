openapi: 3.0.1
info:
  title: Reddit-like Web Application API
  description: API for a web application similar to Reddit, allowing users to post content, comment, and interact with each other.
  version: 1.0.0

paths:
  /users:
    get:
      summary: Get all users
      responses:
        '200':
          description: A list of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
    post:
      summary: Create a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'

  /users/{userId}:
    get:
      summary: Get user by ID
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: User details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
    put:
      summary: Update an existing user
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: User updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
    delete:
      summary: Delete a user
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: User deleted successfully
          
  /users/{userId}/posts:
    get:
      summary: Get all posts
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: A list of posts
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Post'
                  
  /users/{userId}/comments:
    get:
      summary: Get comments made by specified user
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: List of comments
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Comment'
          
  /communities:
    get:
      summary: Get all communities
      responses:
        '200':
          description: A list of communities
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Community'
    post:
      summary: Create a new community
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Community'
      responses:
        '201':
          description: Community created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Community'
  
  /communities/{communityId}:
    get:
      summary: Get communities by ID
      parameters:
        - name: communityId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: A list of communities
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Community'
    put:
      summary: Update an existing community
      parameters:
        - name: communityId
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Community'
      responses:
        '200':
          description: Community updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Community'
    delete:
      summary: Delete a community
      parameters:
        - name: communityId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Community deleted successfully
                
  /communities/{communityId}/posts:
    get:
      summary: Get all posts
      parameters:
        - name: communityId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: A list of posts
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Post'
  
  /posts:
    get:
      summary: Get all posts
      responses:
        '200':
          description: Post details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
    post:
      summary: Create a new post
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Post'
      responses:
        '201':
          description: Post created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
  
  /posts/{postId}:
    get:
      summary: Get post by ID
      parameters:
        - name: postId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Post details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
                
    put:
      summary: Update an existing post
      parameters:
        - name: postId
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Post'
      responses:
        '200':
          description: Post updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
    delete:
      summary: Delete a post
      parameters:
        - name: postId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Post deleted successfully
  
  /posts/{postId}/comments:
    get:
      summary: Get comments for a post
      parameters:
        - name: postId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: List of comments for the post
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Comment'
  
  /comments:
    get:
      summary: Get comments for a post
      responses:
        '200':
          description: List of all comments
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Comment'
    post:
      summary: Create a comment
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Comment'
      responses:
        '201':
          description: Comment created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
                
  /comments/{commentId}:
    get:
      summary: Get a comment by id
      parameters:
        - name: commentId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: List of all comments
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Comment'
    put:
      summary: Update a comment
      parameters:
        - name: commentId
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Comment'
      responses:
        '201':
          description: Comment updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
    delete:
      summary: Delete a comment
      parameters:
        - name: commentId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Comment deleted successfully

components:
  schemas:
    Post:
      type: object
      properties:
        id:
          type: integer
        title:
          type: string
          example: "My First Post"
        content:
          type: string
          example: "This is the content of my first post."
        author:
          $ref: '#/components/schemas/User'
        community:
          $ref: '#/components/schemas/Community'
        createdAt:
          type: string
          format: date-time

    Comment:
      type: object
      properties:
        id:
          type: integer
        content:
          type: string
        post:
          $ref: '#/components/schemas/Post'
        author:
          $ref: '#/components/schemas/User'
        createdAt:
          type: string
          format: date-time
    
    User:
      type: object
      properties:
        id:
          type: integer
        username:
          type: string
        createdAt:
          type: string
          format: date-time
        comments:
          $ref: '#/components/schemas/Comment'
        posts:
          $ref: '#/components/schemas/Post'
          
    Community:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        number_of_members:
          type: integer
        createdAt:
          type: string
          format: date-time
        members:
          $ref: '#/components/schemas/User'
        posts:
          $ref: '#/components/schemas/Post'
  